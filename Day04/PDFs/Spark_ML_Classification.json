{"paragraphs":[{"title":"Read the dataset","text":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.ml.feature.VectorIndexer\nimport org.apache.spark.ml.regression.{RandomForestRegressionModel, RandomForestRegressor}\n\n// Load and parse the data file, converting it to a DataFrame.\nval data = spark.read.format(\"csv\").option(\"header\", true).option(\"inferSchema\", \"true\").load(\"/tmp/data/adultIncome.data\")\ndata.count\ndata.printSchema\ndata.show","dateUpdated":"2018-12-06T06:07:08-0600","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544098028637_524114815","id":"20170525-043355_1484877031","dateCreated":"2018-12-06T06:07:08-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:13042"},{"title":"Decision Tree Classifier ","text":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.DecisionTreeClassificationModel\nimport org.apache.spark.ml.classification.DecisionTreeClassifier\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nimport org.apache.spark.ml.feature.VectorIndexer\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.feature.StringIndexer\n\n// Load and parse the data file, converting it to a DataFrame.\nval data = spark.read.format(\"csv\").option(\"header\", true).option(\"inferSchema\", \"true\").load(\"data/adultIncome.data\")\n\nval Array(trainingData, testData) = data.randomSplit(Array(0.8, 0.2))\n\nval windexer = new StringIndexer()\n  .setInputCol(\"workclass\")\n  .setOutputCol(\"workIndex\")\n\nval sindexer = new StringIndexer()\n  .setInputCol(\"sex\")\n  .setOutputCol(\"genderIndex\")  \n  \nval labelindexer =  new StringIndexer()\n  .setInputCol(\"class_label\")\n  .setOutputCol(\"label\") \n\nval assembler = new VectorAssembler()\n  .setInputCols(Array(\"age\", \"workIndex\", \"genderIndex\", \"captial-gain\", \"captial-loss\"))\n  .setOutputCol(\"features\")\n\n// Train a RandomForest model.\nval dtc = new DecisionTreeClassifier()  \n \n// Chain indexer and forest in a Pipeline.\nval pipeline = new Pipeline()\n  .setStages(Array(windexer, sindexer, labelindexer, assembler,  dtc))\n \n// Train model. This also runs the indexer.\nval model = pipeline.fit(trainingData)\n\n\n// Make predictions.\nval predictions = model.transform(testData)\n\n// Select example rows to display.\npredictions.select(\"class_label\", \"age\", \"workclass\", \"sex\", \"captial-gain\", \"captial-loss\",\"prediction\", \"label\", \"features\").sample(false, 0.01).show\n\n//evaluation\nval evaluator = new MulticlassClassificationEvaluator()\n  .setPredictionCol(\"prediction\")\n  .setMetricName(\"accuracy\")\nval accuracy = evaluator.evaluate(predictions)\nprintln(\"Test Error = \" + (1.0 - accuracy))\n\n//tree model \nval treeModel = model.stages(4).asInstanceOf[DecisionTreeClassificationModel]\nprintln(\"Learned decision tree model:\\n\" + treeModel.toDebugString)\n","dateUpdated":"2018-12-06T06:07:08-0600","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544098028639_524884313","id":"20170525-051759_624121063","dateCreated":"2018-12-06T06:07:08-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:13043"},{"title":"Radom Forest Regression","text":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.ml.feature.VectorIndexer\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.regression.{RandomForestRegressionModel, RandomForestRegressor}\nimport org.apache.spark.ml.feature.StringIndexer\n\n// Load and parse the data file, converting it to a DataFrame.\nval data = spark.read.format(\"csv\").option(\"header\", true).option(\"inferSchema\", \"true\").load(\"data/adultIncome.data\")\n\nval Array(trainingData, testData) = data.randomSplit(Array(0.8, 0.2))\n\nval windexer = new StringIndexer()\n  .setInputCol(\"workclass\")\n  .setOutputCol(\"workIndex\")\n\nval sindexer = new StringIndexer()\n  .setInputCol(\"sex\")\n  .setOutputCol(\"genderIndex\")  \n  \nval labelindexer =  new StringIndexer()\n  .setInputCol(\"class_label\")\n  .setOutputCol(\"label\") \n\nval assembler = new VectorAssembler()\n  .setInputCols(Array(\"age\", \"workIndex\", \"genderIndex\", \"captial-gain\", \"captial-loss\"))\n  .setOutputCol(\"features\")\n\n// Train a RandomForest model.\nval rfg = new RandomForestRegressor()\n \n// Chain indexer and forest in a Pipeline.\nval pipeline = new Pipeline()\n  .setStages(Array(windexer, sindexer, labelindexer, assembler,  rfg))\n \n// Train model. This also runs the indexer.\nval model = pipeline.fit(trainingData)\n\n\n// Make predictions.\nval predictions = model.transform(testData)\n\n// Select example rows to display.\npredictions.select(\"class_label\", \"age\", \"workclass\", \"sex\", \"captial-gain\", \"captial-loss\",\"prediction\", \"label\", \"features\").sample(false, 0.01).show\n\n\n// Select (prediction, true label) and compute test error.\nval evaluator = new RegressionEvaluator()\n  .setLabelCol(\"label\")\n  .setPredictionCol(\"prediction\")\n  .setMetricName(\"rmse\")\nval rmse = evaluator.evaluate(predictions)\nprintln(\"Root Mean Squared Error (RMSE) on test data = \" + rmse)\n\n//show the learned tree\nval rfModel = model.stages(4).asInstanceOf[RandomForestRegressionModel]\nprintln(\"Learned regression forest model:\\n\" + rfModel.toDebugString)\n  ","dateUpdated":"2018-12-06T06:07:08-0600","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544098028641_510263855","id":"20170525-044148_296731712","dateCreated":"2018-12-06T06:07:08-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:13044"},{"title":"Naive Bayes","text":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.NaiveBayes\nimport org.apache.spark.ml.feature.VectorIndexer\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.feature.StringIndexer\n\n// Load and parse the data file, converting it to a DataFrame.\nval data = spark.read.format(\"csv\").option(\"header\", true).option(\"inferSchema\", \"true\").load(\"data/adultIncome.data\")\n\nval Array(trainingData, testData) = data.randomSplit(Array(0.8, 0.2))\n\nval windexer = new StringIndexer()\n  .setInputCol(\"workclass\")\n  .setOutputCol(\"workIndex\")\n\nval sindexer = new StringIndexer()\n  .setInputCol(\"sex\")\n  .setOutputCol(\"genderIndex\")  \n  \nval labelindexer =  new StringIndexer()\n  .setInputCol(\"class_label\")\n  .setOutputCol(\"label\") \n\nval assembler = new VectorAssembler()\n  .setInputCols(Array(\"age\", \"workIndex\", \"genderIndex\", \"captial-gain\", \"captial-loss\"))\n  .setOutputCol(\"features\")\n\n// Train a model.\nval nbc = new NaiveBayes() \n \n// Chain indexer and forest in a Pipeline.\nval pipeline = new Pipeline()\n  .setStages(Array(windexer, sindexer, labelindexer, assembler,  nbc))\n \n// Train model. This also runs the indexer.\nval model = pipeline.fit(trainingData)\n\n\n// Make predictions.\nval predictions = model.transform(testData)\n\n// Select example rows to display.\npredictions.select(\"class_label\", \"age\", \"workclass\", \"workIndex\", \"sex\", \"genderIndex\", \"captial-gain\", \"captial-loss\",\"prediction\", \"label\", \"features\").sample(false, 0.01).show\n\n//evaluation\nval evaluator = new MulticlassClassificationEvaluator()\n  .setPredictionCol(\"prediction\")\n  .setMetricName(\"accuracy\")\nval accuracy = evaluator.evaluate(predictions)\nprintln(\"Test Error = \" + (1.0 - accuracy))\n","dateUpdated":"2018-12-06T06:07:08-0600","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544098028645_508724859","id":"20170525-040447_157959709","dateCreated":"2018-12-06T06:07:08-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:13045"},{"title":"Logistic Regression ","text":"import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.feature.VectorIndexer\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.ml.feature.StringIndexer\n\n// Load and parse the data file, converting it to a DataFrame.\nval data = spark.read.format(\"csv\").option(\"header\", true).option(\"inferSchema\", \"true\").load(\"data/adultIncome.data\")\n\nval Array(trainingData, testData) = data.randomSplit(Array(0.8, 0.2))\n\nval windexer = new StringIndexer()\n  .setInputCol(\"workclass\")\n  .setOutputCol(\"workIndex\")\n\nval sindexer = new StringIndexer()\n  .setInputCol(\"sex\")\n  .setOutputCol(\"genderIndex\")  \n  \nval labelindexer =  new StringIndexer()\n  .setInputCol(\"class_label\")\n  .setOutputCol(\"label\") \n\nval assembler = new VectorAssembler()\n  .setInputCols(Array(\"age\", \"workIndex\", \"genderIndex\", \"captial-gain\", \"captial-loss\"))\n  .setOutputCol(\"features\")\n\n// Train a model.\nval lr = new LogisticRegression()\n  .setMaxIter(10)\n  .setRegParam(0.3)\n  .setElasticNetParam(0.8)\n\n \n// Chain indexer and forest in a Pipeline.\nval pipeline = new Pipeline()\n  .setStages(Array(windexer, sindexer, labelindexer, assembler,  lr))\n \n// Train model. This also runs the indexer.\nval model = pipeline.fit(trainingData)\n\n\n// Make predictions.\nval predictions = model.transform(testData)\n\n// Select example rows to display.\npredictions.select(\"class_label\", \"age\", \"workclass\", \"sex\", \"captial-gain\", \"captial-loss\",\"prediction\", \"label\", \"features\").sample(false, 0.01).show\n\n//evaluation\nval evaluator = new MulticlassClassificationEvaluator()\n  .setPredictionCol(\"prediction\")\n  .setMetricName(\"accuracy\")\nval accuracy = evaluator.evaluate(predictions)\nprintln(\"Test Error = \" + (1.0 - accuracy))","dateUpdated":"2018-12-06T06:07:08-0600","config":{"editorSetting":{"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544098028647_509494357","id":"20170525-053047_1398380903","dateCreated":"2018-12-06T06:07:08-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:13046"},{"dateUpdated":"2018-12-06T06:07:08-0600","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1544098028670_512957097","id":"20170525-070640_1966972560","dateCreated":"2018-12-06T06:07:08-0600","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:13047"}],"name":"Spark_ML_Classification","id":"2DZMEDFKM","angularObjects":{"2CMDTM8CJ:shared_process":[],"2CPDC6ZB2:shared_process":[],"2CP5ZU9SW:shared_process":[],"2CPFNNFNC:shared_process":[],"2CMD1FBKY:shared_process":[],"2CPQ9D7CU:shared_process":[],"2CNM5KG7K:shared_process":[],"2CMKTH11A:shared_process":[],"2CM3HVBGS:shared_process":[],"2CN4NQ8R3:shared_process":[],"2CQG2GQ83:shared_process":[],"2CKYK7XT7:shared_process":[],"2CM9PB5E7:shared_process":[],"2CPHXSP2V:shared_process":[],"2CPSDGADU:shared_process":[],"2CMDJMCTD:shared_process":[],"2CQTMHNQY:shared_process":[],"2CQ4R7X8J:shared_process":[],"2CP4UF3GR:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}